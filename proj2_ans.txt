# proj 2

练习 1: 实现 first-fit 连续物理内存分配算法

A:  在实现 first-fit 内存分配算法的回收函数时, 要考虑地址连续的空间块之间的合并操作.

    在建立空闲页块链表时, 需要按照空闲页块起始地址来排序,形成一个有序的链表.

    简要说明设计实现过程. 

    first-fit 算法是否有进一步的改进空间 ?
   
/****************************************************************************/


练习 2：实现寻找虚拟地址对应的页表项 PTE  ？

    通过设置页表和对应的 PTE ,可建立虚拟内存地址和物理内存地址的对应关系.
    其中 get_pte 函数是设置 PTE 环节中的一个重要步骤.  此函数找到一个虚地址对应的二级 PTE
    的内核虚拟地址,如果此二级 PTE 不存在,则分配一个包含此项的二级 PT.


   2.1==> 描述 PDE (page directory entry) 和 PTE (page table entry) 中每个组成部分的含义以及对 os 而言的潜在用处.

   2.2==> 如果 os 执行过程中访问内存,出现了页访问异常,硬件要做哪些事情 ？


练习 3: 释放某虚地址所在的页并取消对应二级 PTE 的映射 ？

        当释放一个包含某虚地址的物理内存页时,需要让对应此物理内存页的管理数据结构 Page 做相关的清除处理, 使得此物理内存页成为空闲；    

        另外还需要把表示虚地址与物理地址对应关系的二级 PTE 清除。  page_remove_pte 函数.

        数据结构 Page 的全局变量(其实是一个数组)的每一项与 PT 中的 PDE 和 PTE 有无对应关系？ 如果有,其对应关系是啥 ？

        如果希望虚拟地址与物理地址相等, 则需要怎么修改 proj2 ?




练习 Challenge : buddy system (伙伴系统) 分配算法  ？

    buddy system 算法把系统中的可用存储空间划分为存储空间划分为存储块（block）来进行管理,每个存储块的大小必须是 2 的 n 次幂, 即 1,2,4,8,16,32.....

 
练习 Challenge : 任意大小的内存单元 slub 分配算法  ？

    slub 算法,实现两层架构的高效内存单元分配, 第一层是基于页大小的内存分配, 第二层是在第一层基础
    上实现基于任意大小的内存分配. 可简化实现,能够体现其主体思想即可.  参考 linux 的 slub 分配算法.

/****************************************************************************/