# proj 7 同步互斥
/*******************************************************************************/

# 同步互斥机制的设计与实现

   互斥是指某一资源同时只允许一个进程对其进行访问,具有唯一性和排他性,但互斥不用限制进程对资源的访问顺序,即访问可以是无序的,这种先后次序取决于 系统要完成的任务的需求.

   在进程写资源情况下,进程间要求满足互斥条件.
   在进程读资源情况下,可以允许多个进程同时访问资源.

/*******************************************************************************/

   ## 实现手段有多种

    时钟中断管理、等待队列、信号量、管程机制（包含条件变量设计）等,基于信号量实现哲学家问题的执行过程.

    在实现信号量机制和管程机制时,需要让无法进入临界区的进程睡眠,为此在 os kernel 中设计了等待队列 wait_queue. 当进程无法进入临界区（无法获得信号量时）,可让进程进入等待队列,这时的进程处于等待状态（也称为阻塞状态）,从而会让 proj6 的 scheduler 选择一个处于 就绪状态 RUNNABLE STATE 的进程,进行进程切换,让新进程有机会占用 CPU 执行,从而让整个系统的运行更加高效.

    init_main 调用 check_sync 是 proj7 的起始执行点（总控函数）. 这个函数分为了两部分.

    第一部分是基于信号量实现哲学家问题.
    第二部分是基于管程实现的哲学家问题.

/*******************************************************************************/
    # 同步互斥机制的底层支撑

    由于 CPU 的调度问题,且进程在访问某类资源暂时无法满足的情况下,进程会进入等待状态.这导致了
    多进程执行时的不确定性和潜在执行结果的不确定性.为了确保执行结果的正确性, 需要设计更加完善的进程
    等待和互斥的底层支撑机制,确保能正确提供基于信号量和条件变量的同步互斥机制.


    根据 OS 原理的知识,我们知道如果没有在硬件级别保证 读内存--修改值--写回内存的原子性,我们只能
    通过复杂的软件来实现同步互斥操作.   但由于有定时器、屏蔽/使能中断、等待队列 wait_queue 支持
    test_and_bit 等原子操作机器指令的存在,使得我们在实现进程等待、同步互斥上得到了极大的简化.

/*******************************************************************************/
    ## 定时器

    在传统的 OS 中, 定时器是其中一个基础而重要的功能.它提供了基于时间事件的调度机制.
    在 OS kernel 中, 时钟(timer) 中断给 OS 提供了有一定间隔的时间事件,操作系统将其作为基本的
    调度和计时单位(记录两次时间中断之间的时间间隔为一个时间片, timer splice).

    基于此时间单位, OS 得以向上提供基于时间点的事件, 并实现基于时间长度的睡眠等待和唤醒机制.
    在每个时钟中断发生时, OS 产生对应的时间事件. 应用程序或者 OS 的其它组件可以以此来构建更复杂和
    高级的进程管理和调度算法.

/*******************************************************************************/
    ## 信号量

    信号量是一种同步互斥机制的实现,普遍存在于现在的各种 OS kernel 中. 相对于 spinlock 的应用对象
    ,信号量的应用对象是在临界区中运行的时间较长的进程(线程).  等待信号量的进程需要睡眠来减少占用 CPU
    的开销.  参考 “Opearating Systems Internals and Design Principles” 第五章 “同步互斥”中对
    信号量实现的原理描述:

typedef struct
{
	int value;                  // 信号量的当前值
	wait_queue_t wait_queue;    // 信号量对应的等待队列
} semaphore_t;

对照信号量的原理性描述和具体实现,可以发现二者在流程上是基本一致,只是具体实现采用了关中断的方式保证
了对共享资源的互斥访问,通过等待队列让无法获得信号量的进程睡眠等待.   另外,我们可以看出信号量的计数器
value 具有如下性质:

value >0, 表示共享资源的空闲数.
value <0,表示该信号量的等待队列里的进程数.
value =0,表示等待队列为空.
/*******************************************************************************/
/*******************************************************************************/
/*******************************************************************************/
/*******************************************************************************/
/*******************************************************************************/
